"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkPlasma"] = self["webpackChunkPlasma"] || []).push([["src_controller_StellaController_js"],{

/***/ "./src/component/StellaComponent.js":
/*!******************************************!*\
  !*** ./src/component/StellaComponent.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StellaComponent)\n/* harmony export */ });\n/* harmony import */ var _Plasma_Abstract_AbstractComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Plasma/Abstract/AbstractComponent */ \"./src/Plasma/Abstract/AbstractComponent.js\");\n\r\n\r\n\r\nclass StellaComponent extends _Plasma_Abstract_AbstractComponent__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n\r\n\r\n    constructor() {\r\n        super();\r\n        this.setData({})\r\n        this.render()\r\n        this.script()\r\n    }\r\n\r\n    render() {\r\n        let template = this.getVue(\"stella/stella.twig\")\r\n        this.genTemplate(\"panelPage\", template, this.data)\r\n    }\r\n\r\n    script() {\r\n        $('#translateToStella').click((event) => {\r\n            event.preventDefault();\r\n            let console = $('#translateToStellaConsole');\r\n            console.empty();\r\n            /*if (typeWriter(\"> Initializing universal translator . . . . . . . . \", \"translateToStellaConsole\" )){\r\n                console.log(\"done\");\r\n            }*/\r\n            console.prepend(\"<p id='next-00'></p>\")\r\n            new Typed('#next-00', {\r\n                strings: [\"> Initializing universal translator . . . . . . . . \"],\r\n                typeSpeed: 50,\r\n                showCursor: false,\r\n                onStringTyped: function () {\r\n                    console.prepend(\"<p id='next-01'></p>\")\r\n                    new Typed('#next-01', {\r\n                        strings: [\"> Universal translator Initialized \"],\r\n                        typeSpeed: 50,\r\n                        showCursor: false,\r\n                        onStringTyped: function () {\r\n                            console.prepend(\"<p id='next-02'></p>\")\r\n                            new Typed('#next-02', {\r\n                                strings: [\"> Loading S.T.P [Stella Translator Program] Please wait ................................................ \"],\r\n                                typeSpeed: 50,\r\n                                showCursor: false,\r\n                                onStringTyped: function () {\r\n                                    console.prepend(\"<p id='next-03'></p>\")\r\n                                    new Typed('#next-03', {\r\n                                        strings: [\"> S.T.P Loaded, starting translation process \"],\r\n                                        typeSpeed: 50,\r\n                                        showCursor: false,\r\n                                        onStringTyped: function () {\r\n                                            console.prepend(\"<p id='next-04'></p>\")\r\n                                            let converted = convert($('#encodeToStella').val())\r\n                                            let outputText = \"> Output generated :  \" + converted\r\n                                            new Typed('#next-04', {\r\n                                                strings: [outputText],\r\n                                                typeSpeed: 50,\r\n                                                showCursor: false,\r\n\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        })\r\n\r\n        $('#translateFromStella').click((event) => {\r\n            event.preventDefault()\r\n            let codes = $('#decodeFromStella').val().split(\" \")\r\n            let console = $('#translateFromStellaConsole');\r\n            console.empty();\r\n            console.prepend(\"<p id='decode-00'></p>\")\r\n            new Typed('#decode-00', {\r\n                strings: [\"> Loading S.T.P [Stella Translation Project, please wait ................ \"],\r\n                typeSpeed: 50,\r\n                showCursor: false,\r\n                onStringTyped: function () {\r\n                    console.prepend(\"<p id='decode-01'></p>\")\r\n                    let finalText = \"\"\r\n                    let x\r\n                    for (x in codes) {\r\n                        let currentCode = codes[x]\r\n                        let array = decode(currentCode)\r\n\r\n                        var dictionary = new Typo(\"en_US\");\r\n                        let y\r\n                        let couldBe = []\r\n                        for (y in array) {\r\n                            let word = array[y]\r\n                            if (dictionary.check(word)) {\r\n                                couldBe.push(word)\r\n                            }\r\n                        }\r\n                        if (couldBe.length == 0){\r\n                            finalText+= \"[\"+array.toString()+\"] \"\r\n                        }else if (couldBe.length == 1){\r\n                            finalText+= couldBe[0]+\" \"\r\n                        }else{\r\n                            finalText+=\"[\"+couldBe.toString()+\"] \"\r\n                        }\r\n                    }\r\n                    let outputText = \"> Translation generated :  \" + finalText\r\n                    new Typed('#decode-01', {\r\n                        strings: [outputText],\r\n                        typeSpeed: 50,\r\n                        showCursor: false,\r\n\r\n                    });\r\n                }\r\n            });\r\n\r\n        })\r\n\r\n        function convert(inputStr) {\r\n            let dictionary = \"abcdefghijklmnopqrstuvwxyz\"\r\n            let explode = inputStr.toLowerCase().split(\"\")\r\n            let x\r\n            let value = \"\"\r\n            for (x in explode) {\r\n                let letter = explode[x]\r\n                let y;\r\n                let found = false;\r\n                for (y in dictionary.split(\"\")) {\r\n                    let symbole = dictionary.split(\"\")[y]\r\n                    if (letter == symbole) {\r\n                        let symboleOffset = parseInt(y) + 1\r\n                        value = value + \"\" + symboleOffset\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!found) {\r\n                    value = value + \" \"\r\n                }\r\n            }\r\n            return value\r\n        }\r\n\r\n        function decode(string, prefix) {\r\n            var code = \"abcdefghijklmnopqrstuvwxyz\", output = [];\r\n            if (string.length === 0)\r\n                output.push(prefix);\r\n            else\r\n                for (var i = 1; i <= Math.min(2, string.length); i++) {\r\n                    var letter = code[string.slice(0, i) - 1];\r\n                    if (letter) {\r\n                        var nextPrefix = (prefix || \"\") + letter;\r\n                        output = output.concat(decode(string.slice(i), nextPrefix));\r\n                    }\r\n                }\r\n            return output;\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n}\n\n//# sourceURL=webpack://Plasma/./src/component/StellaComponent.js?");

/***/ }),

/***/ "./src/controller/StellaController.js":
/*!********************************************!*\
  !*** ./src/controller/StellaController.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StellaController)\n/* harmony export */ });\n/* harmony import */ var _Plasma_Abstract_AbstractController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Plasma/Abstract/AbstractController */ \"./src/Plasma/Abstract/AbstractController.js\");\n/* harmony import */ var _component_AppComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../component/AppComponent */ \"./src/component/AppComponent.js\");\n/* harmony import */ var _component_StellaComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../component/StellaComponent */ \"./src/component/StellaComponent.js\");\n\r\n\r\n\r\n\r\nclass StellaController extends _Plasma_Abstract_AbstractController__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n\r\n    constructor(name, isApp, core) {\r\n        super(name, isApp, core);\r\n    }\r\n\r\n    index() {\r\n        new _component_AppComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n        this.clearDashboard()\r\n        new _component_StellaComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\r\n\r\n    }\r\n\r\n    unload() {\r\n\r\n    }\r\n}\n\n//# sourceURL=webpack://Plasma/./src/controller/StellaController.js?");

/***/ })

}]);